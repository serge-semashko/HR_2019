docs/process_subscription.cfg
[comments]
    descr=Создание списка user_id для оповещение по подписке на документы. 
            Собирает список событий для документов за последние минут и рассылает пользователям, 
            которые были подписаны на эти события по конкретным документам 
    author=Семашко

[end]

[description]
    input = 
            
    output = Создание событий оповещения
    параметр users_list=usr1_id, usr1_id, .... список подписанных пользователей (csv) ??
[end]

[parameters]
    LOG=ON
[end]


[report]

    Интервал, за который анализируется надо ли рассылать оповещение ??
    $SET_PARAMETERS hist_len=24*60*30
    $SET_PARAMETERS subscr_list=
    $TIMER 


    $TIMER #TIMER_START# 
    $LOG2 <br>timer start=#TIMER_START# #TIMER#<br> ??
    $GET_DATA [list subscribed users]
    $TIMER #TIMER_START# 
    $LOG2 <br>timer start=#TIMER_START# #TIMER#<br> ??
    $BREAK  ??!subscr_list
    $INCLUDE [js module functions]
    $GET_DATA SQL:select concat(alias," ",value," ") as actions from sys_const where (alias like "~doc_action%" or alias like "~doc_comment%") 
    $JS var actions = prm('actions').split(' ');
    $LOG2 evlist=#evlist#<br> ??
    $LOG2 subscr_list=#subscr_list#<br> ??

    $GET_DATA SQL:select concat(alias," ",value,"\n") as group_def from sys_const sc where sc.alias like "~group_act%"

    $INCLUDE [replace in subscription ~group_action* with ~doc_action]
    $LOG2 ==================<br> ??
   event  doc_id, ifnull(wf_step_id,-1), ifnull(event_type,-1), notify_user_id, round(TIME_TO_SEC(timediff(now(),event_date)) /60,0), event_date ??
   subscr user id, doc_id, events ??

    $INCLUDE [get event data and prepare eventa array ev_arr]
    $TIMER
    $TIMER #TIMER_START# 
    $INCLUDE [add notify for subscription]
    $TIMER #TIMER_START# 
    
[end]


[get events]
    Список doc_id step_id event_type event_date dt - сколько минут прошло после события. Для простоты анализа в javascript совпадающих событий ??
    select concat(we.doc_id, " ",ifnull(we.wf_step_id,-1), " ", ifnull(we.event_type,-1), " " , we.notify_user_id , " ", 
       round(TIME_TO_SEC(timediff(now(),event_date)) /60,0), " ", we.event_date , "\n") evlist_new
    from wf_events  we
    where round(TIME_TO_SEC(timediff(now(),event_date)) /60,0) < #hist_len# and we.event_type is not null;
[end]

[list subscribed users]
    
    Список подписок всязанных с документами в предидущем списке событий??
    select 
	 concat(user_id,"|",doc_id,"|",events,"\n" ) as subscr_list
	 from u_subscription 
    where doc_id in 
    (select doc_id from wf_events  we
    where round(TIME_TO_SEC(timediff(now(),event_date)) /60,0) < #hist_len#  and we.event_type is not null);
[end]

(33557,33566, 24023, 33688, 33722, 28909, 33961, 33227, 32939, 29957, 33826, 33940, 33942, 33116, 30883, 33955, 33331, 33653, 33373, 33474, 33936, 26546, 32635, 32095, 33649, 21211, 32285, 30197, 32073, 14819, 32860, 33044)
[create subscription event]
insert into wf_events 
    (doc_id
    , wf_step_id
    , wf_history_id 
    , event_type
    , event_text
    , event_date
    , processed
    , notify_user_id)

values (#doc_id#
    , #STEP_ID# ??STEP_ID
    , null ??!STEP_ID
    , null  
    , null ??!EVENT_TYPE
    , #EVENT_TYPE# ??EVENT_TYPE
    , '#COMMENT_ID#'
    , '#EVENT_DATE#'
    , null
    , #NOTIFY_USER_ID#)
;
[end]


[get event data and prepare eventa array ev_arr]
$JS{
    var ev_arr =[];
    function execSQL(sqlSection, execSection) {
        //_$LOG(2, "execSQL sqlSection = " + sqlSection + " execSection" + execSection + "\n", sectionLines, out);
        var sql = BT.getCustomSectionAsString(sqlSection);
        if (sql.length === 0) {
    //        BT.WriteLog(2, "<font color=red> loopSQL:" + sqlSection + ": SECTION NOT FOUND OR EMPTY</font>");
            return;
        }
        var r = dbUtil.getResults(sql);
        if (typeof r == "undefined") {
            return;
        }
        if (r == null) {
            return;
        }
        var sumstr = "";
        var headers = getColNames(r);

        while (r.next()) {
            var recstr="";
            for (i = 0; i < headers.length; i++) {
                var val = r.getString(i + 1);
                BT.addParameter(headers[i], val);
                sumstr +=  val + " <br>";
                recstr +=  val + " ";
            }
            var event = recstr.replace('\n','');
            event = event.split(' ');
            event[2]=findAliasByValue(event[2]);

            ev_arr.push(event);
            //_$LOG(2, "<br>Current row= " + JSON.stringify(event) + "<br>");
    //        BT.getCustomSection("", execSection, out);
        }
        dbUtil.closeResultSet(r);
         //_$LOG(2, "<br>Current events= " + ev_arr.length + "<br>");
         //_$LOG(2, "<br>" + JSON.stringify(ev_arr) + "<br>");
    }
$JS}
$JS execSQL('[get events]','');
[end]

[replace in subscription ~group_action* with ~doc_action]
   $JS{
        var grdef = prm('group_def').split("\n");
        var list = prm('subscr_list')
//        //_$LOG(2,"list_origin="+list+'<br>');
        for (var i in grdef){
            var gr = grdef[i].split(' ');
//            //_$LOG(2,' group='+grdef[i]+'<br>');
            var gr_name = gr[0];
            var gr_ext = gr[1];
            list= list.replace(new RegExp(gr_name,'g'),gr_ext);
//            //_$LOG(2,'name='+gr_name+' with'+gr_ext+"<br> list="+list+'<br>');
        }

        var list = list.split("\n");
        var sublist = [];
        for (var i in list) {
            var el = list[i].split('|');
            sublist.push(el);
        }
//        //_$LOG(2,'sublist='+JSON.stringify(sublist)+'<br>');
    $JS}
[end]

[js module functions]
    Функции поиска Alias по value и обратно - данные из sys_const. Константы ~doc_action* ~doc_comment* !
    $JS{
       function findAliasByValue(value){
         if (+value>=1000) {
            value =+value-1000;
         }
         for (var i = 0;i<actions.length; i+=2){
//            //_$LOG(2," findAliasByValue "+actions[i+1]+" =  "+value+'<br>');

            if (actions[i+1] == value){
//               //_$LOG(2," findAliasByValue "+actions[i]+" =  "+value+'<br>');
                return actions[i];
            }
         }   
         return "===Undefined===";    
       }
       function findValueByAlias(alias){
         for (var i = 0;i<actions.length; i+=2){
//            //_$LOG(2," findAliasByValue "+actions[i]+" =  "+alias+'<br>');

            if (actions[i].trim() == alias.trim()){
//               //_$LOG(2," findAliasByValue "+actions[i+1]+" =  "+alias+'<br>');
                return actions[i+1];
            }
         }   
         return -1;    
       }
    $JS}
    Процедура создания события оповещения??
    $JS{
        function addNotify(ev_arr,user_id, doc_id,step_id , evType, evTime, evDateTime){
           var ev = [];
           //_$LOG(2,'===== EVENT added = '+JSON.stringify(ev)+" "+evTypeValue+'<br>');
           ev.push(doc_id);
           ev.push(step_id);
           ev.push(evType);
           ev.push(user_id);
           ev.push(evTime);
           ev.push(doc_id);
           ev.push(evDateTime.split(' ')[0]);
           ev.push(evDateTime.split(' ')[1]);
           ev_arr.push(ev);
           setPrm('doc_id',doc_id);
           setPrm('COMMENT','');
           var evTypeValue = +findValueByAlias(evType);
           if (evTypeValue>-1){
              evTypeValue +=1000; 
           }
           setPrm('WF_HISTORY_ID','');
           setPrm('NOTIFY_USER_ID',user_id);

           if (+step_id == -1) {
              setPrm('STEP_ID','');
           } else {
              setPrm('STEP_ID',step_id);
           }
           setPrm('EVENT_TYPE',evTypeValue);
           setPrm('EVENT_DATE', evDateTime);
           _$GET_DATA('[create subscription event]');
           _$LOG(2,'===== subscription EVENT added = '+JSON.stringify(ev)+" "+evTypeValue+'<br>');
        }
    $JS}    
    Процедуры поиска нет ли уже оповешения по подписке на событие??
    $JS{
        function findNotifyEvent(ev_arr, user_id, doc_id, step_id, evType, evTime){
            for (var i in ev_arr) {
                var ev = ev_arr[i];
                //_$LOG(2,'==EV compare = '+JSON.stringify(ev)+" "+evType+" "+evTime+'<br>')
                //_$LOG(2,'___1='+ev[0]+" "+doc_id+'<br>')
                if (ev[0] !== doc_id){
                    continue;
                }

                //_$LOG(2,'___2='+ev[1]+" "+step_id+'<br>')
                if (+ev[1] !== +step_id){
                    continue;
                }
                //_$LOG(2,'___3='+ev[2]+" "+evType+'<br>')
                if ( (ev[2]) !== ( evType ) ){ 
                     
                    continue;
                }
                //_$LOG(2,'___4='+ev[3]+" "+user_id+'<br>')
                if ( +ev[3] !== +user_id ){
                    continue;
                }
                //_$LOG(2,'___5='+ev[4]+" "+evTime+' '+( (+ev[4]) - (+evTime) )+'<br>')
                if ( ( Math.abs((+ev[4]) - (+evTime) ))>600 )  {
                    continue;
                }
                //_$LOG(2,'===== EV find = '+JSON.stringify(ev)+" "+evType+" "+evTime+'<br>')
                return i;
            }
            return -1;
        }
    $JS}

[end]


[add notify for subscription]
Добавление оповещений на подписки ??
    $TIMER 

    $JS{
       for (var i in ev_arr) {
         var event =  ev_arr[i];
         var ev_doc_id =  event[0];
         var ev_step_id =  event[1];
         var ev_evType =  event[2];
         var ev_user_id =  event[3];
         var ev_evTime =  event[4];
         var ev_evDateTime = event[5]+" "+event[6];

        //_$LOG(2,'=========== EVENT = '+JSON.stringify(event)+'<br>')
         for (var sind in sublist) {
            var subscr=sublist[sind];
//            //_$LOG(2,'___check  ='+JSON.stringify(subscr)+'<br>')
            if (subscr[1] !== ev_doc_id) {
                // не совпадают id документа
                continue;
            }
            if (subscr[0] == ev_user_id) {
                // Оповещение для этого пользователя
                continue;
            }

//            //_$LOG(2,event[2]+' check  ='+subscr[2]+'<br>')
            if (subscr[2].indexOf(ev_evType)>=0  ){
//                  //_$LOG(2,'______OK__<br>')
                    
                    var already = findNotifyEvent(ev_arr,subscr[0], ev_doc_id,ev_step_id, ev_evType, ev_evTime);
                    //_$LOG(2,'___already='+already+'_oK__<br>')
                    //_$LOG(2,'event'+JSON.stringify(event)+'<br>');
                    if (already>-1){
                        continue;
                    }
                    //_$LOG(2,'___________________ add notify <br>');
                    addNotify(ev_arr,subscr[0], ev_doc_id, ev_step_id, ev_evType, ev_evTime, ev_evDateTime);
            }
         }
       }
    $JS}
    $TIMER #TIMER_START# 
    $LOG2 Notify add time  #TIMER#<br>

[end]

[old prepare ev_arr]
    $JS{    
       // массив одномерный - нечетные 'alias' четные 'value'
       var evlist = prm('evlist'); 
       evlist = evlist.split('\n');
       var ev_arr_o = [];
       for (var i in evlist){
         var event =  evlist[i].split(' ');
         event[2]=findAliasByValue(event[2]);
         ev_arr_o.push(event);
       }
       //_$LOG(2,'====ev_arr old='+JSON.stringify(ev_arr_o)+'<br>')
       //_$LOG(2,'====ev_arr new='+JSON.stringify(ev_arr)+'<br>')
       //_$LOG(2,'===== EVENT first enter<br>')
    $JS}

[end]